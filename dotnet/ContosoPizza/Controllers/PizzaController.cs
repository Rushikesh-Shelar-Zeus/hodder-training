using Microsoft.AspNetCore.Mvc;

using ContosoPizza.Models;
using ContosoPizza.Services;

namespace ContosoPizza.Controllers;

[ApiController]
[Route("[controller]")]
public class PizzaController : ControllerBase
{
    private readonly IPizzaService _pizzaService;
    private readonly ILogger _logger;
    public PizzaController(IPizzaService pizzaService, ILogger<PizzaController> logger)
    {
        _pizzaService = pizzaService;
        _logger = logger;

    }

    //GET all Action
    [HttpGet]
    public async Task<ActionResult<IEnumerable<Pizza>>> GetAll()
    {
        try
        {
            var pizzas = await _pizzaService.GetAllPizzasAsync();
            return Ok(pizzas);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "[GET all] Error Fetching Pizza");
            return StatusCode(500, "An error occurred while fetching the pizzas. ");
        }
    }

    //GET by Id Action
    [HttpGet("{id}")]
    public async Task<ActionResult<Pizza>> Get(int id)
    {
        try
        {
            var pizza = await _pizzaService.GetPizzaByIdAsync(id);
            if (pizza is null)
            {
                return NotFound();
            }
            return Ok(pizza);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "[GET by Id] Error Fetching Pizza with Id {id}", id);
            return StatusCode(500, "An error occurred while fetching the pizza.");
        }
    }

    // POST action
    [HttpPost]
    public async Task<IActionResult> Create([FromBody] Pizza pizza)
    {
        try
        {
            if (pizza.Id != 0)
            {
                return BadRequest("Client should not provide an Id. It is generated by the server.");
            }
            if (ModelState.IsValid == false)
            {
                return BadRequest(ModelState);
            }
            var id = await _pizzaService.AddPizzaAsync(pizza);
            return CreatedAtAction(nameof(Get), new { id = id }, pizza);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "[POST] Error Creating Pizza");
            return StatusCode(500, "An error occurred while creating the pizza.");
        }
    }

    //Put Action
    [HttpPut("{id}")]
    public async Task<IActionResult> Update(int id, [FromBody] Pizza pizza)
    {
        try
        {
            if (pizza is null)
            {
                return BadRequest("Pizza cannot be null.");
            }
            var existingPizza = await _pizzaService.GetPizzaByIdAsync(id);
            if (existingPizza is null)
            {
                return NotFound($"Pizza with Id {id} not found.");
            }
            await _pizzaService.UpdatePizzaAsync(id, pizza);
            return NoContent();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "[PUT] Error Updating Pizza with Id {id}", id);
            return StatusCode(500, "An error occurred while updating the pizza.");
        }
    }

    //DELETE action
    [HttpDelete("{id}")]
    public async Task<IActionResult> Delete(int id)
    {
        try
        {
            var existingPizza = await _pizzaService.GetPizzaByIdAsync(id);
            if (existingPizza is null)
            {
                return NotFound($"Pizza with Id {id} not found.");
            }
            await _pizzaService.DeletePizzaAsync(id);
            return NoContent();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "[DELETE] Error Deleting Pizza with Id {id}", id);
            return StatusCode(500, "An error occurred while deleting the pizza.");
        }
    }
}